<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            text-align: center; 
            background-color: #f4f4f4; 
            margin: 0; 
            padding: 0; 
        }
        h1 { margin-top: 20px; color: #333; }

        #llContainer { 
            margin: 20px auto; 
            min-height: 100px; 
            padding: 10px; 
            display: flex; 
            align-items: center;
            justify-content: flex-start;
            gap: 20px;
            overflow-x: auto;
            background: #fff;
            border: 2px solid #333;
            border-radius: 10px;
        }
        .ll-node { 
            background: #4CAF50; 
            color: white; 
            padding: 15px 20px; 
            border-radius: 8px; 
            font-weight: bold;
            position: relative;
            display: flex;
            flex-direction: column;
            align-items: center;
            transition: transform 0.3s ease, background 0.3s ease;
        }
        .ll-node::after {
            content: "â†’";
            position: absolute;
            right: -20px;
            top: 50%;
            transform: translateY(-50%);
            font-size: 24px;
            color: #333;
        }
        .ll-node:last-child::after {
            content: "";
        }

        input, select, button {
            padding: 8px 12px; 
            margin: 5px; 
            border-radius: 5px; 
        }
        button { cursor: pointer; background: #2196F3; color: white; border: none; }

        .content {
            text-align: left;
            margin: 40px auto;
            max-width: 800px;
            background: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 2px 6px rgba(0,0,0,0.2);
        }
        pre {
            background: #222; 
            color: #eee; 
            padding: 10px; 
            border-radius: 5px; 
            overflow-x: auto;
        }
        table {
            width: 100%; 
            border-collapse: collapse; 
            margin: 15px 0;
        }
        th, td {
            border: 1px solid #333; 
            padding: 8px; 
            text-align: center;
        }
        th { background: #4CAF50; color: white; }
    </style>
</head>
<body>
    <h1>Linked List Visualizer</h1>

    <input type="number" id="indexInput" placeholder="Index (optional)">
    <input type="text" id="valueInput" placeholder="Value">
    <select id="operationSelect">
        <option value="insert">Insert</option>
        <option value="delete">Delete</option>
    </select>
    <button onclick="performOperation()">Perform</button>

    <div id="llContainer"></div>
    <a href="/">Back to Home</a>

    <!-- Content Section -->
    <div class="content">
        <h2>What is a Linked List?</h2>
        <p>
            A <b>linked list</b> is a linear data structure where each element (node) contains a value and a pointer to the next node.
            Unlike arrays, elements are not stored at contiguous memory locations.
        </p>

        <h2>Code Snippets</h2>
        <h3>Java</h3>
        <pre>
class Node {
    int data;
    Node next;
}
        </pre>

        <h3>Python</h3>
        <pre>
class Node:
    def __init__(self, data):
        self.data = data
        self.next = None
        </pre>

        <h2>Time Complexity</h2>
        <table>
            <tr><th>Operation</th><th>Time Complexity</th></tr>
            <tr><td>Access (by index)</td><td>O(n)</td></tr>
            <tr><td>Search</td><td>O(n)</td></tr>
            <tr><td>Insertion at head</td><td>O(1)</td></tr>
            <tr><td>Insertion at tail</td><td>O(1) if tail pointer exists, otherwise O(n)</td></tr>
            <tr><td>Deletion at head</td><td>O(1)</td></tr>
            <tr><td>Deletion at tail</td><td>O(n)</td></tr>
        </table>

        <h2>Advantages</h2>
        <ul>
            <li>Dynamic size, no need to predefine length</li>
            <li>Easy insertion and deletion at any position (if pointer is known)</li>
            <li>Efficient memory usage compared to arrays with frequent insertions/deletions</li>
        </ul>

        <h2>Disadvantages</h2>
        <ul>
            <li>Random access is not possible; must traverse nodes sequentially</li>
            <li>Extra memory required for storing pointers</li>
            <li>More complex implementation compared to arrays</li>
        </ul>
    </div>

    <script>
        let llData = <%- JSON.stringify(llData) %>;
        const container = document.getElementById("llContainer");

        function renderLL(arr){
            container.innerHTML = "";
            arr.forEach((val, index)=>{
                const node = document.createElement("div");
                node.className = "ll-node";
                node.innerHTML = `<div>${val}</div><small>[${index}]</small>`;
                container.appendChild(node);
            });
        }

        function performOperation() {
            const value = document.getElementById("valueInput").value;
            const index = document.getElementById("indexInput").value;
            const op = document.getElementById("operationSelect").value;

            if(op === "insert") {
                if(index !== "") {
                    llData.splice(index, 0, value);
                } else {
                    llData.push(value);
                }
            } else if(op === "delete") {
                if(index !== "") {
                    llData.splice(index, 1);
                } else {
                    llData.pop();
                }
            }

            renderLL(llData);
            document.getElementById("valueInput").value = "";
            document.getElementById("indexInput").value = "";
        }

        renderLL(llData);
    </script>
</body>
</html>
